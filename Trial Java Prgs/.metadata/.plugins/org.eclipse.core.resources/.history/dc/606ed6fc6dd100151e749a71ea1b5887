import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;


public class ReflectionExample {

	public void test(Object o) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException{
		Class<? extends Object> stu = o.getClass();
		Field[] field = stu.getDeclaredFields();
	
		for(Field field2 : field){
			System.out.println(field2.getName());
		}
		
		Method[] methods = stu.getDeclaredMethods();
		for(Method method2 : methods){
			System.out.println(method2.getName());
			//System.out.println("ssss"+method2.getModifiers());
		}
		
		Method method = stu.getDeclaredMethod("setRollno", int.class);
		Field field2 = stu.getDeclaredField("rollno");
		field2.setAccessible(true);
		method.setAccessible(true);
		method.invoke(o, 100);
		
		Method method2 = stu.getDeclaredMethod("getRollno");
		int value =  (Integer) method2.invoke(o);
		System.out.println(value);
	}
	
	public static void  main(String s[]) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchFieldException {
		ReflectionExample e = new ReflectionExample();
		e.test(new Student());
		
	}
	
}
